@startuml tile-wrapping

package Model {

    interface Updatable

    package "Base Model" {
        class Room
        abstract Person
        abstract Item
        class Door
        Person <|-- Student
    }

    package "Wrapper" {
        class Game {
            + nextTurn(nextPlayer : PersonEntity) : void
            + getRooms() : Room 0..*
            + getPlayers() : PersonEntity 0..*
            + getTiles() : Tile 0..*
            + getEntities() : Entity 0..*
        }
        abstract Tile {
            + {abstract} moveTo(PersonEntity) : FloorTile
        }
        class FloorTile {
            + moveTo(PersonEntity) : FloorTile
        }
        class DoorTile {
            + + moveTo(PersonEntity) : FloorTile
        }
        class WallTile

        class Entity
        class ItemEntity {
            + use () : void
            + drop() : void
            + pickUp (PersonEntity) : void
        }
        class PersonEntity {
            + moveRandomly() : void
        }

        Tile <|-- FloorTile
        Tile <|-- DoorTile
        Tile <|-- WallTile

        Entity <|-- PersonEntity
        Entity <|-- ItemEntity

        PersonEntity o-- Person
        ItemEntity o-- Item
        Tile o-- Item
        Tile o- Entity

        Game "tiles 0..*" *-- Tile
        Game "entities 0..*" *-- Entity
        Game "NPCs 0..*" *-- PersonEntity
    }
    Tile o-- Room
    DoorTile o-- Door

    Game "rooms 0..*" *-- Room
    Game "players 1..4" o-- PersonEntity
    Game <|- Updatable
}
package "View" {
    class GameWindow {
        + nextTurn(nextPlayer : PersonEntity) : void
    }
    class SidePanel {
        + nextTurn(nextPlayer : PersonEntity) : void
        + drop (item : ItemEntity, player : PersonEntity) : void
        + use (item : ItemEntity, player : PersonEntity) : void
    }
    class MapView
    GameWindow *-- SidePanel
    GameWindow *-- MapView
    SidePanel *-- PlayerPanel : "playerPanels 4"
    MapView *-- TilePanel : tilePanels 0..*
    }

Game *- GameWindow : gameWindow
package Controller {

    class ControllerClass as "Controller" {
        - nextTurn() : void
        - NPCturn() : void
        + move(direction) : void
        + use (ItemEntity) : void
        + drop (ItemEntity) : void
    }
    class KeyboardEventListener
    enum direction {
        up
        down
        left
        right
    }
    ControllerClass --> KeyboardEventListener
    ControllerClass *-- Game : game

    KeyboardEventListener o-- ControllerClass
}
ControllerClass o-- PersonEntity : currentPlayer
SidePanel o- PersonEntity : currentPlayer
PlayerPanel --> MouseEventListener
PlayerPanel --o PersonEntity : player
SidePanel  o-- ControllerClass : controller

Tile o--- TilePanel : tileView
@enduml