@startuml tile-wrapping

package Model {
    package "Base Model" {
        abstract GameObject
        class Room{
        - capacity : int
		- personCount : int
		- visitorsSinceClean : int
		+ enter(person : Person) : boolean
		+ leave(person : Person) : void
		+ merge(room : Room) : void
		+ split() : Room
		+ moveContents(room : Room) : void
		+ addDoor(door : Door) : void
		+ removeDoor(door : Door) : void 
		+ hideDoors() : void
		+ showDoors() : void
		+ interactCleanEffect(cleanEffect : CleanEffect) : void
		+ getOut(person : Person) : void
		+ clean() : void
		+ isClean() : bool
        }
        abstract Person{
            - name : String
            - knockOutTime : double
            + {abstract} protectFromTeacher(target : Teacher) : void
            + enterRoom(room : Room) : void
            + dropItem(item : Item) : void
            + setKnockOut(value : double) : void
            + getOut() : void
        }
        class Student{
            - eliminated : bool
            + setEliminated(value : bool) : void
            + dropRandomItem() : void
            + getInventory() : Inventory
        }
        
        abstract Item
        class Door{
            - oneWay : bool
            + use(person : Person, from : Room) : void
            + move(from : Room, to : Room) : void
            + hide() : void
            + show() : void
        }
        class Inventory{
            - itemCount : int
            + add(item : Item) : bool
            + remove(item : Item) : void
            + setRoom(room : Room) : void
            + protectFrom(teacher : Teacher) : void
            + dropRandomItem() : void
            + addOnChangeListener(onChange : void) : void
        }

        GameObject <|-- Room
        GameObject <|-- Person
        GameObject <|-- Item

        Door o- Room
        Person *-- Inventory
        Inventory o- Item
        Person <|-- Student
    }

    package "Wrapper" {
        class Game {
            + getRooms() : Room 0..*
            + getPlayers() : Student 0..*
        }
        abstract Tile
        class FloorTile
        class DoorTile
        class WallTile

        class Entity

        Tile <|-- FloorTile
        Tile <|-- DoorTile
        Tile <|-- WallTile

        Entity o-- Person
        Tile o-- Item
        Tile o- Entity

        Game "tiles 0..*" *-- Tile
        Game "entities 0..*" *-- Entity
    }

    Tile o-- Room
    DoorTile o-- Door

    Game "rooms 0..*" *-- Room
    Game "players 1..4" o-- Student
}

package Controller {
    class GameController {
        - currentPlayer : Player
        - players : PlayerController 1..4
        - rooms : Room[]
        - roomViews : RoomView[]
        + setTile(fromTile : Tile, fromView : View) : void
        + addEntity(entity : Entity) : void
        + addPlayerController(playerController : PlayerController) : void
        + addModelView(person: Person, personView: PersonView) : void
        + addModelView(room : Room, roomView : RoomView) : void
        + addRoom(room : Room) : void
        + addRoomView(roomView : RoomView) : void
        + getTile(position : Position) : Tile
        + getCurrentPlayer() : Player
        + updateView() : void
    }
    class KeyboardEventListener{
        + keyPressed(key : int) : void
    }
    class PersonController{
        - person : Person
        + move(direction : Direction) : void
    }
    class PlayerController{
        + dropItem(index : int) : void
    }
    class AiController
    class InventoryController{
        + onInventoryChanged() : void
        + getInventoryView() : InventoryView
    }
    class TileController{
        + tile : Tile
        + onTileChanged() : void
    }
    class ObjectFactory{
        + createDoor(fromRoom : Room, toRoom : Room, fromPos : Position, toPos : Position) : void
        + createItem(position : Position) : void
        + createNPC(position : Position) : void
        + createJanitor(position : Position) : void
        + createPlayer(position : Position) : void
    }

    PersonController <|-- PlayerController
    PersonController <|-- AiController

    GameController -> KeyboardEventListener
    ObjectFactory <- GameController
    GameController *-- PlayerController
    PlayerController *- InventoryController

}

package View {
    class Window
    class MenuPanel
    class GamePanel

    Window *-- MenuPanel
    Window *-- GamePanel


    ' Everything ending in View should implement
    ' Drawable, but it's already chaotic enough
    interface Drawable
    {
        + draw() : void
    }

    class GameView
    class MapView
    class SidePanelView
    class RoomView{
        - tiles : TileView 0..*
        + addTile(tileView : TileView) : void
    }
    class TileView{
        + addOnChangeListener(onChange : void) : void
    }
    class FloorTileView
    class WallTileView
    class DoorTileView
    class PlayerView
    class InventoryView
    class ItemView
    class TransistorView

    ItemView <|-- TransistorView
    TileView <|-- FloorTileView
    TileView <|-- WallTileView
    TileView <|-- DoorTileView

    InventoryView o-- ItemView
    GameView o-- SidePanelView
    SidePanelView o-- PlayerView
    GameView o-- MapView
    MapView o-- RoomView
    RoomView o-- TileView
    FloorTileView o-- PersonView
    FloorTileView o-- ItemView
    PlayerView o-- InventoryView
    PlayerView o-- PersonView
}

GameController "gameState" *--- Game
' GameController "objectViews 0..*" *--- Drawable

GameView o-- Game

PlayerView "person" o-- Student
InventoryController o--- InventoryView
InventoryView "inventory" o-- Inventory
ItemView "item" o-- Item
RoomView "room" o-- Room
TileView "tile" o-- Tile
DoorTileView o-- Door
PersonView o-- Person

@enduml