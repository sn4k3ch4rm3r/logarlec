@startuml tile-wrapping

package Model {
    package "Base Model" {
        abstract GameObject
        class Room
        abstract Person
        abstract Item
        class Door
        class Inventory

        GameObject <|-- Room
        GameObject <|-- Person
        GameObject <|-- Item

        Door o- Room
        Person *-- Inventory
        Inventory o- Item
        Person <|-- Student
    }

    package "Wrapper" {
        class Game {
            + getRooms() : Room 0..*
            + getPlayers() : Student 0..*
        }
        abstract Tile
        class FloorTile
        class DoorTile
        class WallTile

        class Entity

        Tile <|-- FloorTile
        Tile <|-- DoorTile
        Tile <|-- WallTile

        Entity o-- Person
        Tile o-- Item
        Tile o- Entity

        Game "tiles 0..*" *-- Tile
        Game "entities 0..*" *-- Entity
    }

    Tile o-- Room
    DoorTile o-- Door

    Game "rooms 0..*" *-- Room
    Game "players 1..4" o-- Student
}

package Controller {
    class GameController {
        - currentPlayer
        + setTile(fromTile : Tile, fromView : View) : void
        + addEntity(entity : Entity) : void
        + addPlayerController(playerController : PlayerController) : void
        + addModelView(person: Person, personView: PersonView) : void
        + getTile(position : Position) : Tile
        + getCurrentPlayer() : Player
    }
    class KeyboardEventListener{
        + keyPressed(key : int) : void
    }
    class PersonController{
        - person : Person
        + move(direction : Direction) : void
        + pickupItem() : void
    }
    class PlayerController{
        + dropItem(index : int) : void
    }
    class AiController
    class InventoryController{
        + onInventoryChanged() : void
    }
    class TileController{
        + onTileChanged() : void
    }
    class ObjectFactory{
        + createDoor(fromRoom : Room, toRoom : Room, fromPos : Position, toPos : Position) : void
        + createItem(position : Position) : void
        + createNPC(position : Position) : void
        + createJanitor(position : Position) : void
        + createPlayer(position : Position) : void
    }

    PersonController <|-- PlayerController
    PersonController <|-- AiController

    GameController -> KeyboardEventListener
    ObjectFactory <- GameController
    GameController *-- PlayerController
    PlayerController *- InventoryController

}

package View {
    class Window
    class MenuPanel
    class GamePanel

    Window *-- MenuPanel
    Window *-- GamePanel

    interface Drawable
    ' Everything ending in View should implement
    ' Drawable, but it's already chaotic enough
    class GameView
    class MapView
    class SidePanelView
    class RoomView
    class TileView
    class FloorTileView
    class WallTileView
    class DoorTileView
    class PlayerView
    class InventoryView
    class ItemView
    class TransistorView

    ItemView <|-- TransistorView
    TileView <|-- FloorTileView
    TileView <|-- WallTileView
    TileView <|-- DoorTileView

    InventoryView o-- ItemView
    GameView o-- SidePanelView
    SidePanelView o-- PlayerView
    GameView o-- MapView
    MapView o-- RoomView
    RoomView o-- TileView
    FloorTileView o-- PersonView
    FloorTileView o-- ItemView
    PlayerView o-- InventoryView
    PlayerView o-- PersonView
}

GameController "gameState" *--- Game
' GameController "objectViews 0..*" *--- Drawable

GameView o-- Game

PlayerView "person" o-- Student
InventoryController o--- InventoryView
InventoryView "inventory" o-- Inventory
ItemView "item" o-- Item
RoomView "room" o-- Room
TileView "tile" o-- Tile
DoorTileView o-- Door
PersonView o-- Person

@enduml