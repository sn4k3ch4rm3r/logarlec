@startuml game-objects

title GameObjects
' left to right direction
package GameObjects {
	abstract GameObject {
		+ applyEffect(effect : Effect) : void
		+ removeEffect(effect : Effect) : void
		+ addItem(item : Item) : void
		+ removeItem(item : Item) : void
	}

	abstract Person {
		- name : String
		- numItems : int
		+ dropItem(item : Item) : Room
		+ knockOut() : void
		+ enterRoom(room : Room) : void
		+ applyEffect(effect : GasEffect) : void
	}

	class Student {
		+ beingAttacked(teacher : Teacher) : void
		+ ignoreTeacher(teacher : Teacher) : void
		+ eliminate() : void
	}
	class Teacher

	class Room {
		- capacity : int
		- numOfPeople : int
		+ visitEffects(visitor : EffectVisitor) : void
		+ visitPeople(visitor : PersonVisitor) : void
		+ enter(person : Person) : boolean
		+ leave(person : Person) : void
		+ merge(room : Room) : void
		+ split() : Room
		+ moveContents(room : Room) : void
		+ addDoor(door : Door) : void
		+ hideDoors() : void
		+ showDoors() : void
	}
}

interface Updatable {
	+ update(deltaTime : double) : void
}
interface Item {
	+ accept(visitor : ItemVisitor) : void
	+ use(target : GameObject) : void
	+ use(target : Item) : void
}
abstract Effect {
	{abstract} + accept(visitor : EffectVisitor) : void
}

class Door {
	+ use(person : Person, from : Room) : void
	+ hide() : void
	+ show() : void
}

Updatable <|.- GameObject
GameObject <|.- Person
GameObject <|.- Room
Person <|-- Teacher
Person <|-- Student


GameObject *- Effect
GameObject *-- Item

Room *-o Person
Room o--o Door

@enduml