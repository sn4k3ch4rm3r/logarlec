@startuml items

title Items
left to right direction

package Items {
	abstract Item {
		+ {abstract} use() : void
		+ {abstract} useAgainst(target : Teacher) : void
		+ {abstract} usePassive() : bool
		+ {abstract} useItem(item : Item) : void
		+ {abstract} link(other : Transistor) : void
		+ drop() : void
		+ setRoom(room : Room) : void
		+ setPerson(person : Person) : void	
	}
	
	class SlideRule

	class FakeSlideRule
	
	class Transistor {
		+ setTarget(target : Room) : void
		+ setPair(pair : Transistor) : void
	}
	
	class CodeOfStudies {
		- uses : int
	}

	class FakeCodeOfStudies
	
	class Beer 
	
	class WetRag 
	
	class Mask {
		- uses : int
	}

	class FakeMask

	class Camembert

    class AirFreshener

	together {
		Item <|-- SlideRule
		Item <|-- Transistor
		Item <|-- CodeOfStudies
		Item <|-- Beer
		Item <|-- WetRag
		Item <|-- Mask
		Item <|-- Camembert
		Item <|-- AirFreshener

        CodeOfStudies <|-- FakeCodeOfStudies
        Mask <|-- FakeMask
        SlideRule <|-- FakeSlideRule
	}

	Transistor "pair" o- Transistor
}

abstract Person {
	- name : String
	- knockOutTime : double
	+ {abstract} protectFromTeacher(target : Teacher) : void
	+ enterRoom(room : Room) : void
	+ dropItem(item : Item) : void
	+ setKnockOut(value : double) : void
}

class Room {
	- capacity : int
	- personCount : int
	+ enter(person : Person) : boolean
	+ leave(person : Person) : void
	+ merge(room : Room) : void
	+ split() : Room
	+ moveContents(room : Room) : void
	+ addDoor(door : Door) : void
	+ removeDoor(door : Door) : void 
	+ hideDoors() : void
	+ showDoors() : void
}

Item "room" o-up- Room
Item "person" o-up- Person

AirFreshener "effect" o-- CleanEffect
WetRag "effect" o-- RagEffect
Mask "effect" <-- MaskEffect

@enduml