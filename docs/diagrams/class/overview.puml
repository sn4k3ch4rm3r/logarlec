@startuml effects

left to right direction

interface Updatable {
	+ update(deltaTime : double) : void
}

class Door {
	+ use(person : Person, from : Room) : void
	+ hide() : void
	+ show() : void
}

class Inventory {
	- itemCount : int
	- selectedSlot : int
	+ addItem(item : Item) : bool
	+ removeItem(item : Item) : void
	+ dropSelected(room : Room) : void	
}

package Items {
	abstract Item {
		+ {abstract} use(person : Person) : void
		+ {abstract} usePassive(person : Person) : bool		
	}
	
	class SlideRule
	
	class Transistor {
		+ use(person : Person) : void
		+ use(item : Item) : void
		+ use(transistor : Transistor) : void
		+ link(other : Transistor) : void
		+ setTarget(target : Room) : void
	}
	
	class CodeOfStudies {
		- uses : int
	}
	
	class Beer {
	}
	
	class WetRag {
	}
	
	class Mask {
		- uses : int
	}

	class Camembert {
	}

	together {
		Item <|-- SlideRule
		Item <|-- Transistor
		Item <|-- CodeOfStudies
		Item <|-- Beer
		Item <|-- WetRag
		Item <|-- Mask
		Item <|-- Camembert
	}

	Transistor "pair" o- Transistor
}

package Effects {
	interface Effect {
		apply(target : GameObject)
	}

	class BeerEffect
	class RagEffect
	class GasEffect
	class MaskEffect

	together {
		Effect <|.- BeerEffect
		Effect <|.- RagEffect
		Effect <|.- GasEffect
		Effect <|.- MaskEffect
	}
	
	Updatable <|.- Effect
}

package GameObjects {
	abstract GameObject {
		+ {abstract} addItem(item : Item) : void
		+ {abstract} removeItem(item : Item) : void
		+ applyEffect(effect : Effect) : void
		+ removeEffect(effect : Effect) : void
	}

	abstract Person {
		- name : String
		+ knockOut() : void
		+ enterRoom(room : Room) : void
	}

	class Student {
		+ beingAttacked(teacher : Teacher) : void
		+ ignoreTeacher(teacher : Teacher) : void
		+ eliminate() : void
	}
	class Teacher {
		
	}

	class Room {
		- capacity : int
		- numOfPeople : int
		+ enter(person : Person) : boolean
		+ leave(person : Person) : void
		+ merge(room : Room) : void
		+ split() : Room
		+ moveContents(room : Room) : void
		+ addDoor(door : Door) : void
		+ hideDoors() : void
		+ showDoors() : void
	}
	
	Updatable <|.- GameObject
	GameObject <|-- Person
	GameObject <|-- Room
	Person <|-- Teacher
	Person <|-- Student

	Room "people" *- Person
	Person "room" o- Room
	Room "doors [1..*]" o- Door
	Door "from" o- Room
	Door "to" o- Room
	Person "inventory" *- Inventory
	Inventory "items [0..5]" o-- Item
	GameObject "effects [0..*]" *-- Effect
	Room "items [0..*]" o-- Item
}


Item "room" o-- Room

WetRag o-o RagEffect
Mask o-o MaskEffect
@enduml