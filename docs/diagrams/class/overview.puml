@startuml overview

left to right direction

interface Updatable {
	+ update(deltaTime : double) : void
}

class Door {
	+ use(person : Person, from : Room) : void
	+ move(from : Room, to : Room) : void
	+ hide() : void
	+ show() : void
}

class Inventory {
	- itemCount : int
	+ add(item : Item) : bool
	+ remove(item : Item) : void
	+ setRoom(room : Room) : void
	+ protectFrom(teacher : Teacher) : void
	+ dropRandomItem() : void
}

package Items {
	abstract Item {
		+ {abstract} use() : void
		+ {abstract} useAgainst(target : Teacher) : void
		+ {abstract} usePassive() : bool
		+ {abstract} useItem(item : Item) : void
		+ {abstract} link(other : Transistor) : void
		+ drop() : void
		+ setRoom(room : Room) : void
		+ setPerson(person : Person) : void	
	}
	
	class SlideRule

	class FakeSlideRule
	
	class Transistor {
		+ setTarget(target : Room) : void
		+ setPair(pair : Transistor) : void
	}
	
	class CodeOfStudies {
		- uses : int
	}

	class FakeCodeOfStudies

	class Beer 
	
	class WetRag 
	
	class Mask {
		- uses : int
	}

	class FakeMask

	class Camembert

	class AirFreshener

	together {
		Item <|-- SlideRule
		Item <|-- Transistor
		Item <|-- CodeOfStudies
		Item <|-- Beer
		Item <|-- WetRag
		Item <|-- Mask
		Item <|-- Camembert
		Item <|-- AirFreshener
		SlideRule <|-- FakeSlideRule
		CodeOfStudies <|-- FakeCodeOfStudies
		Mask <|-- FakeMask

	}

	Transistor "pair" o- Transistor
}

package Effects {
	abstract Effect {
		- timeRemaining : double
		+ {abstract} applyToStudent(target : Student) : void
		+ {abstract} applyToTeacher(target : Teacher) : void
		+ applyToRoom(room : Room) : void
		+ interactCleanEffect(cleanEffect : CleanEffect) : void
		+ setHolder(holder : GameObject) : void
	}

	class BeerEffect
	class RagEffect
	class GasEffect
	class MaskEffect
	class CleanEffect
	class JanitorEffect

	together {
		Effect <|-- BeerEffect
		Effect <|-- RagEffect
		Effect <|-- GasEffect
		Effect <|-- MaskEffect
		Effect <|-- CleanEffect
		CleanEffect <|-- JanitorEffect
	}
	
	Updatable <|.- Effect
}

package GameObjects {
	abstract GameObject {
		+ {abstract} addItem(item : Item) : void
		+ {abstract} removeItem(item : Item) : void
		+ {abstract} applyEffect(effect : Effect) : void
		+ {abstract} interactTeacher(teacher : Teacher) : void
		+ addEffect(effect : Effect) : void
		+ removeEffect(effect : Effect) : void
	}

	abstract Person {
		- name : String
		- knockOutTime : double
		+ {abstract} protectFromTeacher(target : Teacher) : void
		+ enterRoom(room : Room) : void
		+ dropItem(item : Item) : void
		+ setKnockOut(value : double) : void
		+ getOut() : void
	}

	class Student {
		- eliminated : bool
		+ setEliminated(value : bool) : void
		+ dropRandomItem() : void
	}
	class Teacher {
		- peaceful : bool
		+ setPeaceful(value : bool) : void
	}
	class Janitor

	class Room {
		- capacity : int
		- personCount : int
		- visitorsSinceClean : int
		+ enter(person : Person) : boolean
		+ leave(person : Person) : void
		+ merge(room : Room) : void
		+ split() : Room
		+ moveContents(room : Room) : void
		+ addDoor(door : Door) : void
		+ removeDoor(door : Door) : void 
		+ hideDoors() : void
		+ showDoors() : void
		+ interactCleanEffect(cleanEffect : CleanEffect) : void
		+ getOut(person : Person) : void
		+ clean() : void
		+ isClean() : bool
	}
	
	Updatable <|.- GameObject
	GameObject <|-- Person
	GameObject <|-- Room
	Person <|-- Teacher
	Person <|-- Student
	Person <|-- Janitor

	Room "people" *- Person
	Person "room" o- Room
	Room "doors [1..*]" o- Door
	Person "inventory" *- Inventory
	GameObject "effects [0..*]" *-- Effect
	Room "items [0..*]" o-- Item
}

Door "from" o- Room
Door "to" o- Room
Inventory "items [0..5]" o-- Item
Item "room" o-- Room
Item "person" o-- Person
Effect "holder" o-- GameObject

WetRag o-o RagEffect
Mask o-o MaskEffect
@enduml